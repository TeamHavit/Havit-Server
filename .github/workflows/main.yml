# This is a basic workflow to help you get started with Actions

name: firebase functions deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:
    branches: [ develop ]

jobs:
  main:
    runs-on: ubuntu-latest
    
    steps:
    
      - uses: actions/checkout@v2
      
      - name: Setting Slack API
        run: |
         touch deployMessageToSlack.sh
         echo 'curl -X POST -H 'Content-type: application/json' â€”data  "{\"text\":\" [DEPLOY] [HAVIT_SERVER] deployment successful.\", \"icon_emoji\": \":ghost:\"}" ${{ secrets.DEV_WEB_HOOK_ERROR_MONITORING }}' >> deployMessageToSlack.sh
         chmod 755 deployMessageToSlack.sh
         
      - name: create env file
        run: |
          cd functions
          touch .env
          echo "${{ secrets.DEV_WEB_HOOK_ERROR_MONITORING }}" >> .env
          echo "${{ secrets.DB_USER }}" >> .env
          echo "${{ secrets.DB_HOST }}" >> .env
          echo "${{ secrets.DB_DB }}" >> .env
          echo "${{ secrets.DB_PASSWORD }}" >> .env
          echo "${{ secrets.JWT_SECRET }}" >> .env
          echo "${{ secrets.TYPE }}" >> .env
          echo "${{ secrets.PROJECT_ID }}" >> .env
          echo "${{ secrets.PRIVATE_KEY }}" >> .env
          echo "${{ secrets.PRIVATE_KEY_ID }}" >> .env
          echo "${{ secrets.CLIENT_EMAIL }}" >> .env
          echo "${{ secrets.CLIENT_ID }}" >> .env
          echo "${{ secrets.AUTH_URI }}" >> .env
          echo "${{ secrets.TOKEN_URI }}" >> .env
          echo "${{ secrets.AUTH_PROVIDER_CERT_URL }}" >> .env
          echo "${{ secrets.CLIENT_CERT_URL }}" >> .env
          
      - name: Create service account file
        run: |
          cd functions
          touch havit-wesopt29-firebase-adminsdk-mgljp-478046b091.json
          echo '{' >> havit-wesopt29-firebase-adminsdk-mgljp-478046b091.json
          echo ' "type": ${{ secrets.TYPE }}, ' >> havit-wesopt29-firebase-adminsdk-mgljp-478046b091.json
          echo ' "project_id": ${{ secrets.PROJECT_ID }}, ' >> havit-wesopt29-firebase-adminsdk-mgljp-478046b091.json
          echo ' "private_key": ${{ secrets.PRIVATE_KEY }}, ' >> havit-wesopt29-firebase-adminsdk-mgljp-478046b091.json
          echo ' "private_key_id": ${{ secrets.PRIVATE_KEY_ID }}, ' >> havit-wesopt29-firebase-adminsdk-mgljp-478046b091.json
          echo ' "client_email": ${{ secrets.CLIENT_EMAIL }}, ' >> havit-wesopt29-firebase-adminsdk-mgljp-478046b091.json
          echo ' "client_id": ${{ secrets.CLIENT_ID }}, ' >> havit-wesopt29-firebase-adminsdk-mgljp-478046b091.json
          echo ' "auth_uri": ${{ secrets.AUTH_URI }}, ' >> havit-wesopt29-firebase-adminsdk-mgljp-478046b091.json
          echo ' "token_uri": ${{ secrets.TOKEN_URI }}, ' >> havit-wesopt29-firebase-adminsdk-mgljp-478046b091.json
          echo ' "auth_provider_x509_cert_url": ${{ secrets.AUTH_PROVIDER_CERT_URL }}, ' >> havit-wesopt29-firebase-adminsdk-mgljp-478046b091.json
          echo ' "client_x509_cert_url": ${{ secrets.CLIENT_CERT_URL }} ' >> havit-wesopt29-firebase-adminsdk-mgljp-478046b091.json
          echo '}' >> havit-wesopt29-firebase-adminsdk-mgljp-478046b091.json
      
      - name: Install npm pacakges
        run: |
          cd functions
          npm install
          npm install -g firebase-tools
          npm install --save-dev cross-env
      
      - name: Deploy to Firebase
        run: |
          cd functions
          npm run deploy
        env: 
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
